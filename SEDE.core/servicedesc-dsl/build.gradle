plugins {
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'java'
    id 'groovy'
}

dependencies {

    compile project(":SEDE.core")
    compile project(":SEDE.servicedesc")

    Map libs = project.ext.libs
    compile libs.jackson_databind
    compile libs.jackson_dataformat
    compile libs.groovy

    testRuntimeOnly libs.log4j
    testCompile (
        libs.junit,
        libs.groovy,
        libs.spock
    )
}

/**
 * Compiles all service description files in in the test resources folder:
 *      SEDE.core/servicedesc-dsl/src/test/servicedesc/*.servicedesc.groovy
 *
 * Outputs in the same directory:
 *      .servicedesc.json transcription
 *      .components.json hasco components
 */
task compileServiceDescs {
    dependsOn compileGroovy
    def sourceFiles = fileTree("${projectDir}/src/test/servicedesc/").matching{ include "*.servicedesc.groovy"}
    sourceFiles.each { File aFile ->
        String filename = aFile.name
        String targetFilename = filename.substring(0, filename.length() - ".groovy".length()) + ".json"
        File targetFile = new File(aFile.parentFile, targetFilename)
        String targetComponentsFilename = filename.substring(0, filename.length() - "servicedesc.groovy".length()) + "components.json"
        File targetComponentFile = new File(aFile.parentFile, targetComponentsFilename)

        String sourceAbsPath = aFile.absolutePath
        String targetAbsPath = targetFile.absolutePath
        String targetComponentsAbsPath = targetComponentFile.absolutePath

        // Doing multiple java execs in one task:
        // https://discuss.gradle.org/t/how-do-i-execute-a-command-on-a-list-of-files/4902
        // https://stackoverflow.com/questions/13474842/how-to-execute-javaexec-multiple-times-in-a-single-task-using-gradle
        // TODO add logger files
        doLast {
            javaexec {
                classpath += sourceSets.main.runtimeClasspath
                classpath += sourceSets.test.runtimeClasspath


                main = 'de.upb.sede.SDLCli'

                args '-i', sourceAbsPath, '-o', targetAbsPath
                jvmArgs '--illegal-access=permit'
            }
            javaexec {
                classpath += sourceSets.main.runtimeClasspath
                classpath += sourceSets.test.runtimeClasspath

                main = 'de.upb.sede.SDLCli'

                args '-c', '-i', sourceAbsPath, '-o', targetComponentsAbsPath
                jvmArgs '--illegal-access=permit'
            }
        }
    }
}


assemble.dependsOn(compileServiceDescs)

shadowJar {
    archiveFileName = "sdlc.jar"
    manifest {
        attributes 'Main-Class': 'de.upb.sede.SDLCli'
    }
}

// custom shadow jar task
//import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
//task bundleCompiler(type: ShadowJar) {
//}
//shadowJar.dependsOn(bundleCompiler)


sourceSets {
    test{
        resources {
            srcDirs +=  'src/test/servicedesc'
        }
    }
}
