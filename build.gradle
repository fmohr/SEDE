plugins {
    id "net.linguica.maven-settings" version "0.5" apply false

    // https://plugins.gradle.org/plugin/org.ec4j.editorconfig
    id "org.ec4j.editorconfig" version "0.0.3"
}


subprojects {
    /*
        configuration for all sub projects.
     */
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'net.linguica.maven-settings'
    apply plugin: 'eclipse'

    group = 'de.upb.isys'
    version = '0.1.2'


    configurations {
        provided
        compile.extendsFrom provided
        serviceConf
        asciidoclet
    }

    project.ext {
        /*
         * This flag determines weather the subproject should be published to the maven repository.
         */
        toBePublished = true
        /*
         * Set of library versions used by SEDE projects. Updating these will propagate to most sub-projects.
         */
        project.ext.libs = [
            /*
             * Testing
             */
            spock: 'org.spockframework:spock-core:2.0-M2-groovy-3.0',
            groovy: 'org.codehaus.groovy:groovy-all:3.0.4',
            junit: 'junit:junit:4.13',
            hamcrest: 'org.hamcrest:hamcrest-all:2.2',

            /*
             * Logging
             */
            log4j: [group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.1'],
            slf4j: [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'],

            /*
             * Commons
             */
            commons: [group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'],
            commons_io: [group: 'commons-io', name: 'commons-io', version: '2.6'],

            guava: 'com.google.guava:guava:28.0-jre',

            /*
             * Jackson
             */
            jackson_databind: [group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9'],
            jackson_dataformat: 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.9',
            jackson_schema: 'com.fasterxml.jackson.module:jackson-module-jsonSchema:2.10.0.pr2',

            /*
             * Json Simple
             * Apply both in one:
             * >> compile libs.json_simple, libs.json_simple_exclusions
             */
            json_simple: [group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'],
            json_simple_exclusions: {
                exclude module: 'junit'
                exclude group: 'org.hamcrest'
            },

            /*
             * Documentation
             */
            asciidoclet: 'org.asciidoctor:asciidoclet:1.+',

            immutables: 'org.immutables:value:2.7.4',
            findbugs:[group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'],
            jgit: [group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.3.1.201904271842-r'],
            okhttp3: [group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.2.0'],
            owner: [group: 'org.aeonbits.owner', name: 'owner', version: '1.0.8'],
            systemrule: 'com.github.stefanbirkner:system-rules:1.19.0',
            javax_bind_api: [group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'],
            java_annotation_api: 'javax.annotation:javax.annotation-api:1.3.2'
        ]
        isyslibs = [
            demolib: [group: 'de.upb.isys', name: 'demolib', version: '1.0'],
            builtins: [group: 'de.upb.isys', name: 'builtins', version: '1.1']
        ]
    }

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()

        // we use jitpack in order to add dependecy to github projects:
        maven { url 'https://jitpack.io' }
        maven {
            url "https://nexus.cs.upb.de/repository/maven-releases/"
        }

    }

    dependencies {
		compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

        testImplementation("junit:junit:4.13")
        testRuntimeOnly("org.junit.vintage:junit-vintage-engine:5.6.2")
    }

    test {
        useJUnitPlatform()

        afterSuite { desc, result ->
            if (!desc.parent) {
                if (result.testCount == 0) {
                    logger.warn("${project.name}: No tests were found.")
                }
            }
        }
    }

    // source Jar:
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    // build Jar:
    task jarjar(type: Jar, dependsOn: [assemble]) {

        manifest {
            attributes 'Implementation-Title': "${project.name}",
                    'Implementation-Version': version
        }
        destinationDir = file("$rootDir/deploy/SEDE")
        baseName = project.name

        from { ((configurations.compile - configurations.provided))
                .findAll { it.name.endsWith('jar') }
                .collect { zipTree(it) } }
        from sourceSets.main.output
    }

    // copy python source:
    task buildPython(type: Copy) {
        from "${projectDir}/src/main/python/"
        include "**/*.py"
        into "${rootDir}/deploy/SEDE_python/${project.name}"
    }

    clean.doFirst {
        delete fileTree("$rootDir") {
            include '*.jar'
        }
        delete "${projectDir}/testrsc"
        delete "${projectDir}/out"
        delete "${projectDir}/instances"
        delete "${projectDir}/servicespec"
        delete "${rootDir}/deploy/SEDE"
        delete "${rootDir}/deploy/SEDE_Python"
    }

    apply from: "$rootDir/publish.gradle"
}

apply from: 'docker.gradle'

editorconfig {

    // Exclude folder from editorconfig
    excludes = ['**/instances', 'LICENSE', '**/__pycache__', '**/*.pyc', '**/semantic-data']

}
